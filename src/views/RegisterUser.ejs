<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Registrarse</title>
  <link rel="icon" type="image/jpeg" href="/img/logo-header.jpg">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" defer></script>
  <link href="/css/styles.css" rel="stylesheet">
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Video de fondo único
      const bgVideo = '/img/intro.mp4';

      // Crea el elemento de video
      const videoElem = document.createElement('video');
      videoElem.src = bgVideo;
      videoElem.autoplay = true;
      videoElem.loop = true;
      videoElem.muted = true;
      videoElem.playsInline = true;
      videoElem.style.position = 'fixed';
      videoElem.style.top = '0';
      videoElem.style.left = '-3vw'; // Desplaza el video 2vw a la izquierda
      videoElem.style.width = '110vw';
      videoElem.style.height = '120vh';
      videoElem.style.objectFit = 'cover';
      videoElem.style.zIndex = '-1';
      videoElem.style.pointerEvents = 'none';

      // Establece la velocidad de reproducción a 0.5x cuando el video esté listo
      videoElem.addEventListener('loadedmetadata', function () {
      videoElem.playbackRate = 0.75; // Ajusta la velocidad de reproducción
      });

      document.body.appendChild(videoElem);
      document.body.classList.add('bg-login-custom');
    });
  </script>
  <style>
    .bg-login-custom {
      min-height: 100vh;
      position: relative;
    }

    .bg-login-custom:before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0, 0, 0, 0.45);
      z-index: 0;
      pointer-events: none;
    }

    main.container>div {
      position: relative;
      z-index: 1;
    }

    .field-error {
      color: #dc3545;
      font-size: 0.875rem;
      min-height: 1.2em;
      display: block;
      margin-top: 0.25rem;
      font-weight: 500;
    }

    .input-error {
      border-color: #dc3545 !important;
      box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
      background-color: rgba(220, 53, 69, 0.05) !important;
    }
    
    .input-error:focus {
      border-color: #dc3545 !important;
      box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25) !important;
    }
    
    #formErrorBox {
      background-color: #f8d7da;
      border: 1px solid #f5c6cb;
      border-radius: 0.375rem;
      padding: 0.75rem;
      margin-bottom: 1rem;
      display: none;
      font-weight: 500;
    }
    
    #formErrorBox:not(:empty) {
      display: block;
    }

    .btn-primary,
    .btn-primary:active,
    .btn-primary:focus,
    .btn-primary:hover {
      background-color: #5bc0ff !important;
      border-color: #5bc0ff !important;
      color: #fff !important;
      box-shadow: 0 2px 8px rgba(91, 192, 255, 0.08);
    }
  </style>
</head>

<body class="bg-light text-dark">
  <%- include('partials/navbar', { user: typeof user !== 'undefined' ? user : null }) %>
  <main class="container d-flex flex-column justify-content-center align-items-center" style="min-height: 75vh;">
    <div class="w-100" style="max-width: 600px;">
      <div class="bg-white bg-opacity-90 p-4 rounded shadow-sm border mb-4">
        <h1 class="mb-4 text-center">Registro de usuario</h1>
        <!-- Error message box for validation errors -->
        <div id="formErrorBox" class="text-danger mb-3"></div>
        <form action="/api/users/register" method="POST" enctype="multipart/form-data">
          <div class="mb-3">
            <label for="name" class="form-label">Nombre</label>
            <input type="text" class="form-control" id="name" name="name" required minlength="2" maxlength="40">
            <span class="field-error" id="nameError"></span>
          </div>
          <div class="mb-3">
            <label for="surName" class="form-label">Apellidos</label>
            <input type="text" class="form-control" id="surName" name="surName" required minlength="2" maxlength="100">
            <span class="field-error" id="surNameError"></span>
          </div>
          <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" name="email" required pattern="^[^@\s]+@[^@\s]+\.[^@\s]+$">
            <span class="field-error" id="emailError"></span>
          </div>
          <div class="mb-3">
            <label for="password" class="form-label">Contraseña</label>
            <input type="password" class="form-control" id="password" name="password" required minlength="8"
              pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-={}\[\]:;?,./]).{8,}$"
              placeholder="Min 8 chars, 1 mayúscula, 1 minúscula, 1 número y 1 símbolo">
            <span class="field-error" id="passwordError"></span>
          </div>
          <div class="mb-3">
            <label for="role" class="form-label">Categoría de usuario</label>
            <select id="role" name="role" class="form-select" required>
              <option value="guest">Viajero/a</option>
              <option value="host">Anfitrión</option>
            </select>
            <span class="field-error" id="roleError"></span>
          </div>
          <div class="mb-3">
            <label for="profilePicture" class="form-label">Foto de Perfíl</label>
            <input type="file" class="form-control" id="profilePicture" name="profilePicture" accept="image/*">
            <span style="font-size:0.9em;">Puedes subir una imagen o dejar vacío para no añadir foto.</span>
          </div>
          <div class="mb-3">
            <label for="bio" class="form-label">Biografía</label>
            <textarea id="bio" name="bio" class="form-control" maxlength="500"></textarea>
            <span class="field-error" id="bioError"></span>
          </div>
          <div class="mb-3">
            <label for="phoneNumber" class="form-label">Número de teléfono</label>
            <input type="text" class="form-control" id="phoneNumber" name="phoneNumber" pattern="^[0-9+\-() ]{7,20}$">
            <span class="field-error" id="phoneError"></span>
          </div>
          <div class="mb-3">
            <label for="country" class="form-label">País</label>
            <input type="text" class="form-control" id="country" name="country">
            <span class="field-error" id="countryError"></span>
          </div>
          <div class="mb-3">
            <label for="language" class="form-label">Idioma</label>
            <select id="language" name="language" class="form-select">
              <option value="en">English</option>
              <option value="es">Castellano</option>
              <option value="cat">Catala</option>
            </select>
            <span class="field-error" id="languageError"></span>
          </div>
          <button type="submit" class="btn btn-primary w-100">Registrarse</button>
        </form>
      </div>
    </div>
  </main>
  <%- include('partials/footer') %>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const form = document.querySelector('form');
      const name = form.name;
      const surName = form.surName;
      const email = form.email;
      const password = form.password;
      const role = form.role;
      const phone = form.phoneNumber;
      const country = form.country;
      const language = form.language;
      const bio = form.bio;
      const errorBox = document.getElementById('formErrorBox');
      // Field error spans
      const nameError = document.getElementById('nameError');
      const surNameError = document.getElementById('surNameError');
      const emailError = document.getElementById('emailError');
      const passwordError = document.getElementById('passwordError');
      const roleError = document.getElementById('roleError');
      const phoneError = document.getElementById('phoneError');
      const countryError = document.getElementById('countryError');
      const languageError = document.getElementById('languageError');
      const bioError = document.getElementById('bioError');

      function showError(msg) {
        errorBox.textContent = msg;
      }
      function clearError() {
        errorBox.textContent = '';
      }
      function setFieldError(input, errorSpan, msg) {
        errorSpan.textContent = msg;
        if (msg) {
          input.classList.add('input-error');
        } else {
          input.classList.remove('input-error');
        }
      }
      // Real-time validation functions
      name.addEventListener('input', function () {
        if (name.value.length < 2 || name.value.length > 100) {
          setFieldError(name, nameError, 'El nombre debe tener entre 2 y 100 caracteres.');
        } else {
          setFieldError(name, nameError, '');
        }
      });
      surName.addEventListener('input', function () {
        if (surName.value.length < 2 || surName.value.length > 100) {
          setFieldError(surName, surNameError, 'El apellido debe tener entre 2 y 100 caracteres.');
        } else {
          setFieldError(surName, surNameError, '');
        }
      });
      email.addEventListener('input', async function () {
        const value = email.value.trim();
        if (!/^\S+@\S+\.\S+$/.test(value)) {
          setFieldError(email, emailError, 'Introduce un email válido.');
          return;
        }
        // Validación en backend
        try {
          const res = await fetch(`/api/users/check-email?email=${encodeURIComponent(value)}`);
          const data = await res.json();
          if (data.exists) {
            setFieldError(email, emailError, 'Este email ya está registrado.');
          } else {
            setFieldError(email, emailError, '');
          }
        } catch (e) {
          setFieldError(email, emailError, 'Error al comprobar el email.');
        }
      });
      password.addEventListener('input', function () {
        if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-={}[\]:;?,./]).{8,}$/.test(password.value)) {
          setFieldError(password, passwordError, 'La contraseña debe tener al menos 8 caracteres, una mayúscula, una minúscula, un número y un símbolo.');
        } else {
          setFieldError(password, passwordError, '');
        }
      });
      role.addEventListener('change', function () {
        if (!role.value || (role.value !== 'guest' && role.value !== 'host')) {
          setFieldError(role, roleError, 'Selecciona un rol válido.');
        } else {
          setFieldError(role, roleError, '');
        }
      });
      phone.addEventListener('input', function () {
        if (phone.value && !/^[0-9+\-() ]{7,20}$/.test(phone.value)) {
          setFieldError(phone, phoneError, 'Introduce un teléfono válido.');
        } else {
          setFieldError(phone, phoneError, '');
        }
      });
      country.addEventListener('input', function () {
        if (country.value && (country.value.length < 2 || country.value.length > 100)) {
          setFieldError(country, countryError, 'El país debe tener entre 2 y 100 caracteres.');
        } else {
          setFieldError(country, countryError, '');
        }
      });
      language.addEventListener('change', function () {
        if (!['en', 'es', 'cat'].includes(language.value)) {
          setFieldError(language, languageError, 'Selecciona un idioma válido.');
        } else {
          setFieldError(language, languageError, '');
        }
      });
      bio.addEventListener('input', function () {
        if (bio.value && bio.value.length > 500) {
          setFieldError(bio, bioError, 'La biografía no puede superar los 500 caracteres.');
        } else {
          setFieldError(bio, bioError, '');
        }
      });
      // On submit, check all fields again
      form.addEventListener('submit', function (e) {
        clearError();
        let hasError = false;
        if (name.value.length < 2 || name.value.length > 100) {
          setFieldError(name, nameError, 'El nombre debe tener entre 2 y 100 caracteres.');
          hasError = true;
        }
        if (surName.value.length < 2 || surName.value.length > 100) {
          setFieldError(surName, surNameError, 'El apellido debe tener entre 2 y 100 caracteres.');
          hasError = true;
        }
        if (!/^\S+@\S+\.\S+$/.test(email.value)) {
          setFieldError(email, emailError, 'Introduce un email válido.');
          hasError = true;
        }
        if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-={}[\]:;?,./]).{8,}$/.test(password.value)) {
          setFieldError(password, passwordError, 'La contraseña debe tener al menos 8 caracteres, una mayúscula, una minúscula, un número y un símbolo.');
          hasError = true;
        }
        if (!role.value || (role.value !== 'guest' && role.value !== 'host')) {
          setFieldError(role, roleError, 'Selecciona un rol válido.');
          hasError = true;
        }
        if (phone.value && !/^[0-9+\-() ]{7,20}$/.test(phone.value)) {
          setFieldError(phone, phoneError, 'Introduce un teléfono válido.');
          hasError = true;
        }
        if (country.value && (country.value.length < 2 || country.value.length > 100)) {
          setFieldError(country, countryError, 'El país debe tener entre 2 y 100 caracteres.');
          hasError = true;
        }
        if (!['en', 'es', 'cat'].includes(language.value)) {
          setFieldError(language, languageError, 'Selecciona un idioma válido.');
          hasError = true;
        }
        if (bio.value && bio.value.length > 500) {
          setFieldError(bio, bioError, 'La biografía no puede superar los 500 caracteres.');
          hasError = true;
        }
        if (hasError) {
          showError('Por favor, corrige los errores antes de enviar el formulario.');
          e.preventDefault();
        }
      });
    });
  </script>
</body>

</html>